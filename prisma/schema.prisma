generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider        = "mysql"
  url             = env("DATABASE_URL")
}

model Divisi {
  id              Int               @id @default(autoincrement())
  kode            String?           @unique @db.VarChar(10)
  nama            String?           @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relation Fields
  employee        Employee[]
}

model Employee {
  id              Int               @id @default(autoincrement())
  nama            String            @unique
  nik             String            @unique
  divisi          Divisi            @relation(fields: [divisiName], references: [nama], onDelete: Cascade, onUpdate: Cascade)
  divisiName      String            
  jenis_kelamin   JenisKelamin      @default(Pria)
  alamat          String?
  no_hp           String?
  email           String?
  username        String?           @unique
  password        String?
  foto            String
  in_active       Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  lastLogin       DateTime?         @updatedAt

  // Relation Fields
  employeeRole        EmployeeRole[]
  presence            Presence[]
  history             History[]

}

enum JenisKelamin {
  Pria
  Wanita
}

model Role {
  id              Int               @id @default(autoincrement())
  nama            String            @unique

  // Relation Fields
  employeeRole        EmployeeRole[]
  access              Access[]
}

model EmployeeRole {
  // Relation Fields
  employee            Employee              @relation(fields: [employeeNik], references: [nik], onDelete: Cascade, onUpdate: Cascade)
  employeeNik         String            @id
  role                Role              @relation(fields: [roleName], references: [nama], onDelete: Cascade, onUpdate: Cascade)
  roleName            String
}

model Access {
  path            String            @unique

  // Relation Fields
  role            Role              @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId          Int
}

model Office {
    id              Int               @id @default(autoincrement())
    nama            String
    alamat          String
    latitude        Float
    longitude       Float
    jarak           Float
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
}

model WorkingTime {
    id              Int               @id @default(autoincrement())
    jam_masuk       DateTime          @db.Time
    jam_keluar      DateTime          @db.Time
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
}

model Presence {
  id                  Int               @id @default(autoincrement())
  employee            Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId          Int           
  tanggal             DateTime            @db.Date
  waktu               DateTime            @db.Time
  gps                 String
  jarak               Float
  foto                String
  presensiMasuk       Boolean             @default(true)

  // Relation Fields
  history             History[]
  information         Information[]
  status              Status[]
          
}

model Status {
  id              Int               @id @default(autoincrement())
  nama            String            @unique

  // Relation Fields
  presence            Presence[]
}

model Information {
  id                  Int               @id @default(autoincrement())
  presence            Presence              @relation(fields: [presenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  presenceId          Int
}

model History {
  id                  Int               @id @default(autoincrement())
  employee            Employee      @relation(fields: [employeeName], references: [nama], onDelete: Cascade, onUpdate: Cascade)
  employeeName        String           
  presence            Presence      @relation(fields: [presenceHistory], references: [id], onDelete: Cascade, onUpdate: Cascade)
  presenceHistory     Int 
  
}

